import json
import os
import asyncio
from telegram import Bot, Update
from telegram.ext import ContextTypes
from config import TELEGRAM_TOKEN
from subscribers_logger import log_subscriber
from google_sheets import get_birthdays_from_sheet
from birthday_utils import filter_this_month
from subscribers_logger import log_subscriber_to_csv

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ –∑ —Ç–æ–∫–µ–Ω–æ–º —ñ–∑ .env
bot = Bot(token=TELEGRAM_TOKEN)

# –ù–∞–∑–≤–∞ JSON-—Ñ–∞–π–ª—É, –¥–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ (chat_id)
CHAT_IDS_FILE = 'chat_ids.json'

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ chat_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å
def load_chat_ids() -> list[int]:
    if os.path.exists(CHAT_IDS_FILE):
        with open(CHAT_IDS_FILE, 'r') as f:
            return json.load(f)
    return []

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ chat_id —É —Ñ–∞–π–ª
def save_chat_ids(chat_ids: list[int]) -> None:
    with open(CHAT_IDS_FILE, 'w') as f:
        json.dump(chat_ids, f)

# –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É /start ‚Äî –¥–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    chat_ids = load_chat_ids()

    if chat_id not in chat_ids:
        chat_ids.append(chat_id)
        save_chat_ids(chat_ids)
        log_subscriber(chat_id, update.effective_user.username)
        log_subscriber_to_csv(chat_id, update.effective_user.username)

    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–Ω–∞–≥–∞–¥—É–≤–∞—á –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.\n–ù–∞—Ç–∏—Å–Ω–∏ /list, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è.")

# –§—É–Ω–∫—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º
async def send_monthly_birthdays(birthdays: list[dict]) -> None:
    if not birthdays:
        return

    chat_ids = load_chat_ids()
    message = 'üéâ –Ü–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è:\n'
    for person in birthdays:
        message += f"- {person['name']} ({person['date'].strftime('%d.%m')})\n"

    for chat_id in chat_ids:
        await bot.send_message(chat_id=chat_id, text=message)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏—Ö —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤
async def notify_updates(new_people: list[dict]) -> None:
    if not new_people:
        return

    chat_ids = load_chat_ids()
    message = 'üîî –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏—Ö —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤:\n'
    for person in new_people:
        message += f"- {person['name']} ({person['date'].strftime('%d.%m')})\n"

    for chat_id in chat_ids:
        await bot.send_message(chat_id=chat_id, text=message)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /list
async def list_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    birthdays = get_birthdays_from_sheet()
    this_month = filter_this_month(birthdays)

    if not this_month:
        await update.message.reply_text('üòï –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è –Ω–µ–º–∞—î —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤.')
        return

    message = 'üìÖ –Ü–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è:\n'
    for person in this_month:
        message += f"- {person['name']} ({person['date'].strftime('%d.%m')})\n"

    await update.message.reply_text(message)